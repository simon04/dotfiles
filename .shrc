#!/bin/sh
# settings, aliases and functions for all shells

alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

export NPM_PACKAGES=$HOME/.npm-packages
export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
export PATH="$HOME/bin:$NPM_PACKAGES/bin:$PATH"
export EDITOR='vim'

export QT_LOGGING_RULES='*.debug=false'
export XDG_CURRENT_DESKTOP=KDE # to show icons in kmail when running in i3wm
export KDE_SESSION_VERSION=5 # to make xdg-open work

export josm_svn="$HOME/src/josm.svn/"
alias josm-svn='cd $josm_svn'
export josm_git="$HOME/src/josm.svngit/"
alias josm-git='cd $josm_git'
export josm_plugins="$HOME/src/josm.all.svngit/plugins/"
alias josm-plugins='cd $josm_plugins'
export josm_i18n="$HOME/src/josm.all.svngit/i18n/"
alias josm-i18n='cd $josm_i18n'
export josm_all="$HOME/src/josm.all.svngit/"
alias josm-all='cd $josm_all'
export osm_web="$HOME/src/openstreetmap-website/"
alias osm-web='cd $osm_web'

alias autorotate='jhead -autorot'
alias df='df -h'
alias free='free -h'
alias diff='diff -u'
alias f='find | grep'
alias ff='find -follow | grep'
alias grep='grep --color'
alias ls='ls --color=auto'
alias l='ls -l'
alias lt='ls -trl'
alias sps="ps -ef | grep -v grep | grep"
alias svndiff='svn diff -x -w | vim -R -'
alias cvsdiff='cvs diff -w -U 2 | grep --invert-match ^? | vim -R -'
alias vless='vim - -R'
alias wgeto='wget -qO -'
alias youtube-dl='youtube-dl -t'
alias ocaml='rlwrap ocaml'
alias sudo='sudo -E'
alias rubber='rubber --pdf'
alias pl='pdflatex -interaction=nonstopmode'
alias q!='unset HISTFILE && exit'
alias p0='patch -p0'
alias p1='patch -p1'
alias vimdiff-i="vimdiff -c 'set diffopt+=iwhite'"
alias cleanshp='rm -f *.{cpg,dbf,prj,shp,shx}'
alias zipgrep='for i in **/*jar; do unzip -l "$i"; done | grep'
#alias -g &de='& disown; exit'
alias scour-max='scour --remove-descriptive-elements --enable-viewboxing --enable-id-stripping --enable-comment-stripping --shorten-ids --indent=none'

scour-max-i() {
  in=$1
  tmp=$(mktemp)
  scour \
    --remove-descriptive-elements \
    --enable-viewboxing \
    --enable-id-stripping \
    --enable-comment-stripping \
    --shorten-ids \
    --no-line-breaks --strip-xml-space \
    -i "$in" \
    -o "$tmp" && mv "$tmp" "$in"
}

alias reverse-dns='dig +noall +answer -x'
alias agnf='ag --nofilename'

cleanlatex () {
  setopt null_glob
  rm -f *.{aux,log,nav,out,snm,toc,vrb,dvi,*latexmk}
}

# Prints commands that I always forget
helpme () {
  cat <<EOF
  exiftool -AllDates-=h[:m[:s]] -overwrite_original .
  exiftool '-DateTimeOriginal>FileModifyDate' -overwrite_original .
  exiftool -Author='Simon Legner' '-DateTimeOriginal>FileModifyDate' -overwrite_original .
  exiftool -r '-FileName<DateTimeOriginal' -d IMG_%Y%m%d_%H%M%S.%%e .
  exiftool -d '%Y-%m-%d_%H:%M:%S_%%f.%%e' '-FileName<DateTimeOriginal' .
  exiftool -d '%Y-%m-%d_%H%M%S_%%f.%%e' '-FileName<FileModifyDate' .
  exiftool '-Directory<FileModifyDate' -d %Y-%m t*
  scanimage -L
  scanimage -d genesys:libusb:001:009 -p --resolution 150
  chromium --incognito --proxy-pac-url=~/.config/proxy.pac
  date -d @1319009864
  cat src | while read line; do ...; done
  2>&1
  readlink -f
  mutt: Shift+d, ~s .*
  svn propedit -r N --revprop svn:log
  adb shell ls '.../Camera/IMG_201603*' | tr '\r' ' ' | xargs -n1 adb pull -a
EOF
}

compress_pdf () {
  gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$1-s.pdf" "$1"
}

extract_audio () {
  #params: [in] [out.ext]
  ffmpeg -i "$1" -vn -acodec copy "$2"
}

extract_audio_mp3() {
  ffmpeg -i "$1" -ar 44100 -ab 160k -ac 2 "$2"
}

# mkdir and cd
mkcd () {
  mkdir -p "$@" && cd "$_"
}

# Fuzzy changes directory or shows list of all matching directories
cdd () {
  case $(/bin/ls|grep $@|wc -l) in
    1)
      d=$(/bin/ls|grep $@)
      echo "cd \"$d\""
      cd "$d"
      ;;
    0)
      echo "No match for $@."
      ;;
    *)
      echo "Too many matches for $@:"
      /bin/ls|grep $@
      ;;
  esac
}

focallengthplot () {
  exiftool -T -filename -focallength "$@" | sort -u | awk -F "\t" '{print ($2-$2%5)"-"($2+4-$2%5)}' | sort -n | uniq -c | awk 's=""; {while (length(s)<$1) s=s"*"; printf "%8s "mm"  [%4d]  %s\n", $2, $1, s}'
  exiftool -T -filename -focallength "$@" | sort -u | awk -F "\t" '{print $2}' | sort -n | uniq -c | awk 's=""; {while (length(s)<$1) s=s"*"; printf "%8s "mm"  [%4d]  %s\n", $2, $1, s}'
}

# Converts file(s) to data url
dataurl() {
  # src: http://nick.zoic.org/art/etc/make-data-url.html
  for filename; do
    mimetype=`file -b --mime-type $filename`
    encoded=`base64 -w 0 $filename`
    echo "data:$mimetype;base64,$encoded"
  done
}

mpd_pause_after_current_track() {
  # src: https://bbs.archlinux.org/viewtopic.php?id=55884
  sleep $(mpc | awk -F"[ /:]" '/playing/ {print 60*($8-$6)+$9-$7}');mpc pause
}

# Launches Python's http server
httpd_py () {
  python3 -m http.server ${1:-8000}
}

# Launches PHP's built-in web server
httpd_php () {
  php -S localhost:${1:-8000}
}

# Launches Python's pyftpdlib server
ftpd_py () {
  python3 -m pyftpdlib "$@"
}

# Prepends ISO 8601 date to files
prepend_date () {
  for i in "$@"; do mv -v "$i" "$(date -I) $i"; done
}

split1 () {
  infile=$1
  shift 1
  splitargs=${@:--d -l 1000}
  tail -n +2 ${infile} | split ${splitargs} - ${infile}_
  for file in ${infile}_*
  do
    head -n 1 ${infile} > tmp_file
    cat $file >> tmp_file
    mv -f tmp_file $file
    echo $file
  done
}

# Displays embedded PNG comment
http_png_comment () {
  wget -qO - "$1" | identify -verbose - | grep Comment
}

join_sep () {
  sep=${1:-,}
  # 036   30    1E    RS  (record separator)
  tr "\\n" "\\036" | sed 's/\(.*\)\x1E/\1/' | sed "s/\\x1E/$sep/"
}

# remindme - a simple reminder
# usage: remindme 10m "omg, the pizza"
remindme () {
  sleep $1 && zenity --info --text "$2" &
}

u () {
  python ~/.bin/unicode.py "$@"
}

external_ip () {
  curl ifconfig.pro
}

qr () {
  qrencode -s7 -o - "$@" | display
}

publish_photo () {
  jhead -autorot "$@"
  gm mogrify -verbose -quality 70 -resize 1920x1920 "$@"
  exiftool -Author='Simon Legner' '-DateTimeOriginal>FileModifyDate' -overwrite_original "$@"
}

without_cover () {
  find . -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/cover.jpg" ';' -print
}

adb-ls () {
  [ $# -eq 0 ] && { echo "Usage: $0 /path/on/android"; return; }
  adb shell ls "$@" | tr '\r' ' '
}

adb-mv () {
  [ $# -lt 2 ] && { echo "Usage: $0 /path/on/android/*JPG /target/on/android/"; return; }
  adb shell mkdir -p "$2"
  adb-ls "$1" | xargs -i -n1 adb shell mv -i {} "$2"
}

difference () {
  comm -3 <(sort $1) <(sort $2)
}

web.archive.org/save () {
  http HEAD "https://web.archive.org/save/$1"

aur-clone () {
  git clone ssh+git://aur@aur.archlinux.org/$1.git && cd $1
}
